neutron-server.service : 모든 요청을 받아서 처리해주는 핵심 서비스

neutron server를 제외하고 
neutron-ovs-cleanup.service neutron-destroy-patch-ports.service 서비스는 exited되어있다.

agent.service : 서버 요청을 받아서 기능을 대리해주는 대리인
dhcp-agent.service 이면 dns 기능을 대리해주는 대리인 이라고 볼 수 있다.

neutron-l3-agent.service :
라우터를 처리해준다. name space, router table 에 대한 것들을 처리해주는 서비스

neutron-lbaasv2-agent.service :
예전에 리눅스 할때도 ha-proxy 
openstack 에서도 ha-proxy를 띄운다.

neutron-metadata-agent.service : 
인스턴스 내부에서 curl 169.254.169.254를 접속했었다. 인스턴스 이름이 hostname으로 반영이 된다. ssh 키를 지정하게 되면 key가 Push가 된다. 스크립트 등을 제공해주는 메타 데이터

neutron-metering-agent.service :
측정이라는 의미, 네트워크의 사용량을 체크해준다. neturon의 이름이 붙어있지만, cellometer와 연관이있다. 사용량 측정

neutron-openvswitch-agent.service :
openvswitch 외에도 L2를 구현하기 위한 패키지가 여러가지 있다. 모든것들이 리눅스 브릿지로도 구현이 가능하다.
타 밴드 네트워크 장비들이 있다.

neutron-ovs-cleanup.service :
모든 브릿지를 초기화 했다가 다시 만들어주는 기능을 가지고 있다.

neutron-destroy-patch-ports.service :
br-int, br-tun 를 초기화 해주는, 초기화를 안하면 제대로 작동을 안한다.

active라고 되어있는데 exited 인것은 부팅 시 한번만 실행해주는 것

L3-agent
dhcp-agent
lbass-agent		-->	neutron server에 제어 받는다. network node만 존재한다.
l2-agent (openvswitch)
metadata-agent

openstack network agent list : 
openstack network agent list -c "Agent Type" -c "Host" -c "Alive"

alive = :-) // 웃는 표시, 서양에서는 자주 쓰는 이모티콘

nova-api : 
nova-scheduler :
nova-compute : 
openstack-nova-conductor.service : 주요기능이 데이터베이스와 통신 (nova와 관련된 세부정보, 데이터베이스 기록 관리)
openstack-nova-consoleauth.service : console 인증 (dashboard에 있는 web console 인증) / public cloud는 지원안한다. 보안상 위험이 있어서 // VNC(오프소스 프로토콜) = RDP(원격데스크탑 제어하는 프로토콜), 원격그래픽 환경 제어
openstack-nova-novncproxy.service : client program, 원격에 있는 시스템 화면을 전송을 받는다. 

systemctl -t service | grep neutron
systemctl -t service | grep nova
systemctl -t service | grep libvirtd

diff nova.conf nova.conf.old (nova.conf, server_proxyclient_address=192.168.122.20 수정하면된다)
cd /etc/libvirt/qemu (xml file)
cd /var/lib/nova/instance (disk file)

qemu-img info disk //
backing file (qemu-img info backing file)

cirros image (glance 이미지 파일을 compute node로 가지고 온다. _base와 매칭 시키고 raw file을 만듬)
_base/raw, 씬프로비저닝 한다. 성능이 좀 더 좋기 때문에 <- ID/disk를 참조한다. 원본 이미지 file을 복사를 해두고 link를 거는 형태, 원본 데이터에 변경된 델타 값만 가지고 있음.

cinder와 구성이 비슷하다.

systemctl -t service | grep libvirtd
libvirtd.service                     loaded active running Virtualization daemon

kvm을 제어하는 demon

vi /etc/nova/nova.conf // 6083 line kvm
systemctl restart libvirtd
systemctl restart openstack-nova-compute.service

instance 
pause instance = vm은 작동하지 않지만, 얘가 할당받은 자원을 해제 안하고 계속 소모하고 있는 상태 (일시중지)
suspend instance = 중단, 자원 할당 받은 걸 다 내리는 상태

노트북, 데스크탑에서 절전과 최대절전으로 생각하면 된다.

snap은 기존 인스턴스가 작동하고 있다.
shelve는 임시로 보관 (glance에 저장해놓은 상태)

lock instance - lock 풀기 전까지 어떤 설정도 할 수 없다.
resize instance - 사이즈

ACPI 전원 관리하는 칩

rebuild 이미지가 패키지가 추가되서 만들어놔서 적용을 했을 때, 이미지만 교체할 때 사용하는 옵션 (volume이 있어야함)

ceilometer
알람, 이벤트 정보수집 (mongo db) 사용했었다.

혼자 처리하기 너무 힘들어서 서브 프로젝트로 기능을 쪼게서 나눴다.

gnocchi : 저장된 데이터를 관리 (mariadb로 sql database 사용)
aodh : alarms

알람을 받아서 처리할 수 있는 웹 어플리케이션이 따로 필요함 (대쉬보드에 구현 되어있지 않음)
notifier

systemctl -t service | grep ceilo
openstack-ceilometer-central.service         loaded active running OpenStack ceilometer central agent
openstack-ceilometer-notification.service    loaded active running OpenStack ceilometer notification agent
systemctl -t service | grep aod
openstack-aodh-evaluator.service             loaded active running OpenStack Alarm evaluator service
openstack-aodh-listener.service              loaded active running OpenStack Alarm listener service
openstack-aodh-notifier.service              loaded active running OpenStack Alarm notifier service
systemctl -t service | grep gnocchi
gnocchi-metricd.service                      loaded active running Gnocchi metricd service
gnocchi-statsd.service                       loaded active running Gnocchi statsd service


heat

탬플릿을 이용해서, 인스턴스를 자동화 구성 (탬플릿이 아니더라도 리소스를 생성, 삭제, 관리 할 수 있다)
네트워크부터 인스턴스 생성까지 자동화를 해서 코드로 만드는 것 = 탬플릿

openstack-heat-engine.service :
탬플릿을 읽어서 필요한 각 서비스에 요청해서 스텍이란걸 만든다.

핫탬플릿, 이라고한다.
헤더, 파라미터, 리소스, 아웃풋(출력) 4가지로 구성이 되어있다. 
리소스는 무조건 있어야 동작한다.

cfn 클라우드 포메이션
amazon의 모든 파일을 cfn으로 만들 수 있다.

apicfn (cfn 을 처리하기 위한 서비스)

stack은 특정 리소스 (--enable-rollback 원래 상태로 돌아간다)
openstack stack create e heat/heat-env.yml --enable-rollback --t heat/heat-stack.yml test-stack
openstack stack list
openstack stack resource list test-stack
openstack stack output list test-stack
openstack stack show test-stack server1_private_ip

중첩 스택 ???


