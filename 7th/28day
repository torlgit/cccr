FTP 서버
ftp는 현재 잘 사용되지 않지만, 기본적으로 알고 있어햐 하는 내용,
ftp라는 프로토콜의 이름은 파일전송프로토콜 (File trans protocol)

ftp client, ftp server가 있어서 전송해서 서버에 있는 내용을 다운로드 하거나
클라이언트가 있는 파일을 서버로 업로드를 할 수 있다.

rfc : 비평을 기다리는 요구사항.	/	한글로는 와닿지 않는다.
기술들을 정리해놓은 문서, 새로운 기술을 개발을 하거나 기본적으로 rfc라는 문서.
대부분 문서 번호가 할당되어 있으면 그에 대한 표준이 있다. 그 표준이 만들어지기전에 여러가지 스펙이라던지, 데이터 통신 방식, 패킷의 포맷 형식 등이 적혀있다.	/	구글에서 볼 수 있다.
한번 할당된 문서는 지구가 멸망되기전 까지 지워지지않는다. 계속 남는다.

ftp는 rfc 개정된 프로토콜이다.

ftp에서 사용하는 명령어.
ftp command 각 커맨드 들도 rfc 문서가 있는 부분이 있다.
발전을 하면서 기능을 추가로 했다. 명령어를 다 알 필요는 없다.
ftp 명령어가 있다는 점만 기억을 하면 된다.

ftp는 기본적으로 20, 21번 포트를 사용한다.
일반적으로 보통은 클라이언트와 서버는 하나의 포트만 쓴다.
하나의 서버, 서비는 보통 하나의 포트를 사용하는데, ftp는 2개를 사용한다.
하나는 데이터포트(파일, 파일의 목록), 컨트롤포트 (커맨드 전송포트)로 나뉘어져있다.

업로드를 하라 라는 명령어는 (컨트롤포트)를 통해 실제로 업로드는 데이터포트를 이용해서 업로드
다운로드를 받아라 하는 명령어 전송 (컨트롤포트) 실제로 다운로드는 데이터포트를 이용해서 다운로드

클라이언트 포트는 정해져 있지않다. (예외는 dhcp | dhcp는 정해져있다 / ip가 없기 때문이다)

액티브 모드에서는 어떠한 환경에선 작동하지 않는다. 그래서 일반적으로 ftp는 패시브 방식을 사용한다.
	-> 왜 그러는가?	: nat 에서 작동하지 않는다.
내부에서 나갔다 들어올수는 있지만, 외부에서는 들어올 곳이 없다.

액티브 모드를 보면 제어포트끼린 아무 상관없다. 클라이언트가 서버에게 먼저 요청을 한다.
클라이언트가 서버에 요청을 한다. 
데이터 포트는 서버가 클라이어트 한테 먼저 전송을 한다.
nat talbe 없이 들어올 수 있나? -> 안된다.	/ 포트도 상관없고,
nat table이 없기 때문에 들어올 수가 없어서 통신 자체가 안된다.

제어포트는 명령어가 전송이 되는데 로그에 인증을 하거나, 파일의 목록을 보거나 하는건 명령어로 전송이된다.
파일을 업로드 하거나 다운로드를 할 때는 안된다
서버가 데이터를 클라이언트 한테 주는데 클라이언트가 나트 테이블에 없으면 들어갈 수 없다.

나간적이 없는게 들어올수 없다.
나트를 안쓰는 구조에서는 상관없다.

ftp서버가 불특정 다수에게 제공하는 서비스다. 그러면 서버는 클라이언트가 nat인지 알 수 없다.

패시브 모드는 클라이언트가 먼저 연결을 시도한다. (클라이언트 안에 nat가 있어도 가능하다.)

내가 정할 수 있다. 패시브 모드를할지 액티브 모드를 할지, 아니면 두 개 다 사용할지.
클라이언트가 정한다. 패시브 모드를 할지 액티브 모드를 사용할지.

기본적으로 ftp는 잘 쓰지 않지만 액티브, 패시브 모드에 대해서 알고 있어야하고 그 개념에 대해서 알고 있어야한다.
잘 안쓰인다고 하지만 쓰이는 경우도 있으니 알아둬야한다.

ftp를 안쓰는 이유
플레인 텍스트로 전송한다. 암호화를 지원하지않는다. (중간에 스니핑, 데이터 도청이 가능하다)

그래서 나온게 ssh를 적용 시킨 sftp 등이 있다.

ssl을 안 쓴다. tls 를 쓴다.	/	상징적인 의미기 때문에 ssl라는 말을 자주 사용한다.

4계층 데이터 프로토콜을 암호화 할 수 있다.(tcp, udp 암호화가능)
ftp를 암호화를 할 수 있는건 ssl을 사용해서 ftps로 사용한다.

ftps도 많이 사용하지 않고 sftp를 사용한다.

sftp는 ssh 방식이다.
sftp라는 프로토콜이 없다 (ssh 프로토콜	/	ssh 에다가 ftp를 구현 해놓은 것

결국은 ssh 22번이 열려있으면 받는 형식인데, sftp 설정도 자동으로 되어있다.
굳이 ftp를 올릴 필요는 없다. ssl + ftp 도 구성할 필요가 없다.

sftp, ftps 는 다른 프로토콜이다.
shttp라는 프로토콜도 있지만 잘 사용하지 않는다. https와 기본적인 목적은 같지만 구조가 전혀 다르다.

대표적으로 가장 많이 사용하는걸 vsftp이다. 

20번 포트를 사용하는건 정해진게 아니다. / 서버가 정해서 알려준다.
패시브 모드도 20번 포트 사용이 가능하다.

오늘의 숙제
FTP	active	/	passive 패킷 캡처 그림 비교 -> 파일 제출

디렉토리

디렉토리는 3가지가 있는데
das : 시스템에 직접 연결된 스토리지 (ide (pata), scsi, sas, ata = controlloer)	/ usb, 썬더볼트 등
파티션에 파일시스템을 생성, 관리를 해야되는 주체는 시스템의 관리자.
즉 모든것들은 시스템 관리자가 제어를 해야한다. 마운트, 파일시스템 생성 등 모든 것들.
컨트롤러에 연결 되어있는 형태를 das 라고한다.

nas : nfs, smb (cifs), ftp (x) 
nas 스토리지가 있다. 일반 시스템 disk가 연결 되어있고 디스크가 여러 개 연결 되어있다.
네트워크에 다른 클라이언트에 제공을 해주는 형태 / 디스크가 아닌 특정 디렉토리 (export를 한다) | 마운트 됨
기본적인 목적은 데이터의 공유이다. 내보내기를 하면 똑같은 디렉토리를 동시에 마운트해서 쓸 수 있다.
접근제어도 가능하지만 기본적인 목적은 공유이다. 다 같이 사용하는게 목적
smb = windows 공유폴더

nfs (network file system) 네트워크를 통해 파일 시스템을 공유한다.
클라이언트는 파일시스템 관리, 체크 불가능 | 사용만 가능하다.

기업들은 nfs, smb를 주로 사용한다.
tcp/ip 네트워크에 공유를 해서 사용하는 형태

san : 
das 형태의 스토리지가 연결 되어있다.
tcp/ip 네트워크를 기본적으로 사용하지 않는다.	/	fcp fiber chanel (광케이블) / 비싸다. 전용모델
san용 스위치가 따로 존재한다. fcp 전용으로 처리하는 케이블, 광케이블이다.	| 64gb, 128gb

hba (host but adapter) 

기본적인 목적이 디스크를 네트워크를 통해서 할당을 해준다.	/	das랑 비슷한 형태
fdisk로 보인다. (nas는 fdisk로 보이지 않는다)
기본적으로 공유를 하지 않고 하나씩 전용으로 할당한다.

lun (logical unit number) 을 만들어서 디스크를 제공해준다. (가상의 버츄얼 디스크, lv 등이 될 수 있다)

훨씬 더 빠르게 전용선을 이용해서 das 보다 빠르게 전송을 한다.
웹서버, db 서버 시스템이 많은데 다 das 디스크 관리, 백업, 복구가 어렵다.
구현하는 비용이 엄청 비싸다.

fc - san (fcp) / ip - san (iscsi, fcoe 등등)
요즘은 비용이 너무 비싸다보니 ip - san 방식을 사용한다. / ethernet ip tcp iscsi 방식을 사용

스켈링
스케일 업, 스케일 다운

옛날에 했던 방식은 스케일 업, 한계가있다. (메인보드에 한계가 있다 포트, cpu 소켓 여러 문제)
스케일 아웃 똑같은 기능을 하는걸 여러 개 둔다. (분산 아키텍쳐)

요즘은 스케일 아웃이 트렌드이다.
웹 서버가 여러 대가 있다면, 개발자는 서버에 올려 놓으면 웹 서버로 퍼지게 된다.

nfs ver 3,4 통신 방식이 다르다.

nfsv2 엄청 느리다.

nfSv3 / 방화벽을 다 열어야한다.
아직까지도 많이 사용하는 방식, 비동기식을 지원한다.
서버 - 클라이언트 모델 클라이언트와 서버가 어떻게 통신을 하는지에 대한 통식방식에 따라 개발자

소켓 방식 :
가장 많이 사용하는 방식 = 소켓 ip포트 / 클라이언트가 아이피를 가지고 1:1로 통신하는 기본적인 형태
소켓 구조를 이용해서 프로그래밍을 한다.

RPC :
절차, 클라이언트가 서버에 요청을 하는 것,
클라이언트 - 서버 소켓은 개발자가 네트워크 부분을 구현 해야되는데
rpc는 네트워크 관련된 부분을 프로그래밍 할 필요가 없다. (프로세스 - 프로세스 통신을 하는 용도로 개발) / 운영체제에 rpc 구성방식이 존재 해야한다.

SOAP (simple object access protocol) : 대부분의 서버를 웹으로 구현을 한다. 기본적으로 사용하는 프로토콜  http 프로토콜을 xml 형식으로 전달하는 형태

REST (Repersentational state transfer) AIP : 오로지 http만 사용하는 방식 (순수한 http만 사용) / restful
