Windows
C:\User\계정이름\Download
   사용자	Desktop
		Document

home 디렉토리 :
나만 사용이 가능하다.

pwd : 현재 위치를 나타내는 명령어

path (경로)

절대 경로 :
딱 하나 밖에 없는 경우
가장 최상위부터 절대적인 경로, 여러 개 있을 수가 없다.

상대 경로 :
상대적이다. 내가 어디에 있는지에 따라 상대적이다.
현재 기준으로 내가 어디에 있는지에 따라 바뀔 수 있다.

리눅스에서는 .이 붙어 있는 파일이 있다.
a.txt 윈도우에서는 a를 파일 .txt 를 확장자 라고 한다.
리눅스 개념에서는 확장자라는 개념이 없고, 처음부터 끝까지 다 파일명이다.
리눅스에서 .도 파일명 이라고 할 수 있다.	/   .이 앞에 붙어 있으면 숨겨진다.

drwxrwxr-x	.	 4 	user 	user	 4096  6월 17 10:25 'VirtualBox VMs'
---------- 	-	---	----	----	 ---- ------------- ---------------
파일 종류 	ACL	하드링크 소유자	그룹	 크기  마지막 수정시간 파일 이름

File 시간 Timestamp

mac(modify acess change) stamp


실행 파일은 내용이 바뀌면 안된다. 바뀌면 조작을 했거나, 문제가 있다.

파일을 마지막으로 읽으면 Access,
마지막으로 수정 된 시간은 modify, 
메타 데이터가 마지막 변경된 시간 change이다.
윈도우에서도 파일 속성을 확인해보면 시간이 나온다.

ls -l : 자세하게 보거나, 리스트 목록을 볼 때 사용한다.
 d : 디렉토리 / l 심볼릭 링크 / b 블록 장치 / c캐릭터 장치 / p FIFO또는 Pipe 파일 / P 이벤트 포트 (사라진다)
 s : 소켓 통신 / - : 일반 파일 (텍스트 / ASCII / 실행파일)
 FIFO : first in first out 선입 선출 / 먼저 들어가는게 먼저 나온다. = Stack, Queue 
 | : 파이프
 소켓프로그래밍 / 네트워크프로그래밍 요즘은 만들어둔 것을 사용해서 만들지않는다.
ls -d : 디렉토리 그 자체를 보고 싶을 때 사용한다.
 .: 현재 디렉토리
 ..: 상위 / 부모 디렉토리
ls -ld 보통 이런식으로 활용해서 사용한다.
ls -F : 파일의 형식을 간단하게 표시 / 잘 쓰이지 않는다.
 / 디렉토리 파일	* 실행 파일	(none) 텍스트 / ASCII 파일	@ 심볼릭 링크 파일

File

ELF (Extensible Linking Format) : 리눅스 실행파일, 라이브러리 파일을 의미 (lib, lib64 | /usr/lib, /usr/lib64)
Libray (자주 사용하는 것 미리 만든다)
윈도우 .dll (윈도우 실행파일 / 오류날때발생)
프로그램을 실행 할 때 참조가 된다.

리눅스에서 SO가 붙어있으면 라이브러리이다. / 확장자 개념이 없으므로 라이브러리라고 확신 할 순 없다.

워드 파일, 그림 파일은 os가 다르더라도 실행파일이 같은데,
운영체제 실행파일은 운영체제 마다 다르다.

[user@localhost ~] \U : 사용자	\H : 호스트	\W : 작업중인 디렉토리	~ : 자신의 홈 디렉토리 (틸드)
$ : 일반사용자	# : 관리자 (root)
~/user
~user -> 관리자가 이동 할 때

cat : 텍스트 파일을 화면으로 출력해주는 명령어
CLI에서는 스크롤이 안되므로 more 명령어를 사용한다. / txt파일을 보기 위한 명령어다. 페이지를 단위로 보여준다.
less : more의 반대 (방향키 사용가능) / 유닉스 처음 나올 때 fn키, nm키, 방향키가 없었다. - 나중에 나왔음

more 명령어 스크롤키
스페이스 : 다음 페이지 표시 / b 이전 페이지 표시
/패턴 : 특정 문자열 패턴을 검색 (내림차순) / 현재 화면에 없어야 검색이 가능하다.
n : 다음 패턴을 검색 / N 이전 패턴을 검색

시스템 파일
/lib : 라이브러리
/dev : 장치파일
/usr : 사용자 프로그램 / 여러가지 용도로 사용, 실행파일, 라이브러리
/root : 사용자의 홈 디렉토리 (root만 사용 가능하다)
/run : 데이터 저장 (임시) - 조건에 의해 임시로 저장한다.
/var : 데이터를 영구로 저장 / 데이터베이스, html 등 DB, 웹 컨텐츠, System logs가 있다.
/boot : 부트로더, 부트스트랩이 있다.
/opt : 서브파티어플리케이션 (다른 곳에서 만들어진 제 3의 어플리케이션)
/etc : 기타 등등등.. | 설정파일
 윈도우 제어판과 유사하다고 보면된다. / 유닉스가 처음 나올 땐 etc가 없었다. / etc는 촌스러우니 엣씨라고 부른다.

OS 32 / 64
CPU는 2013년 기준으로 32Bit를 생산하지 않는다. 64bit 이면서 32 bit 운영체제를 사용하는 것
성능이 2배가 되거나 하진 않는다. / 메모리가 차이가 나고 주소를 저장하는 최대값이 변한다.
요즘은 대부분 램을 8~16기가 이상을 사용하기에 주소 최대값이 금방 걸려버린다.

head : 파일의 첫 10줄을 보여준다.
tail : 파일의 마지막 10줄을 보여준다.
wc : 파일의 줄 / 단어/ 문자수를 확인 하는 명령어
 -l : 줄 개수 / -w : 단어 개수(공백) / -c : byte 개수 (글자수) / -m 문자 개수
 아시아는 2byte씩 나라마다 글자 크기가 다르다 / 한글은 리눅스에서 거의 사용 안한다 / 간혹 사용하니 기억해두자.

cp option source target : 파일을 복사하는 명령어
 -i : 대화형 모드 / -r : 디렉토리를 다른 디렉토리로 복사 할 때 사용

mv option source target : 파일 이동하는 명령어 [이름 변경도 가능하다]

touch : 빈 파일 생성 명령어
mkdir : 디렉토리 생성 명령어
 -p : 계층적으로 디렉토리 만들 때 사용

rm : 파일 삭제 명령어
 -r : 강제 삭제 / -i : 대화형 모드

하드링크 :
디렉토리를 복사하는 개념과는 다르다. 그 디렉토리에 대한 링크 연결. 파일 생성시 1개가 생성

inode table = 번호
파일을 구별하는 노드 / 커널이 모든 걸 관리, 모든 오브젝트를 이름으로 구별하지 않고, 오브젝트 번호를 붙인다.

inode table에는 type, 권한, 링크수, 소유자, 소/그룹, timestamp, size, point(파일명 링크 = 하드링크)
inode 코드 하나의 테이블 / 하드링크 테이블을 변경 시 원본도 같이 변경이 된다.

보통 파일을 지우는 것은 -> 테이블을 지우는 것이며 포렌싱(disk부검) 삭제 파일을 찾아 낼 수 있다.
데이터를 삭제해도 남아 있으니 나쁜 짓을 하면 안된다.

ln source target : 하드링크 생성

심볼릭 링크 :
윈도우에서 바로가기와 유사하다고 생각을 하면된다.

다른 디렉토리에 link를 거는 형식이다.
보안 때문에 특정 사용자는 특정 디렉토리 이상 못 들어가게 막는데, 그 디렉토리에 있는 파일을 사용해야 할 때
심볼릭 링크를 걸어서 준다.

파일시스템이 다르거나, 디스크가 다르면 inode 체계가 달라진다.

심볼릭은 하드링크와 inode 테이블이 다르다. point는 바라보는 파일의 경로로 되어있다.
링크가 연결된 파일이 있어도 내가 링크한 파일이 삭제되면 그 연결이 끊긴다.

하드링크는 파일복사가 아니고, 용량에 대한 변화가 없다. (디렉토리 링크는 안되고 파일 링크만 가능)
심볼릭링크는 글자당 바이트 수로 용량 변화가 있으며, 디렉토리 링크가 가능하다.

grep option pattern filename : 파일 내용에서 특정 문자 또는 패턴을 검색하는 명령어
 -i : 검색 패턴 대소문자 무시
 -l : 매칭 되는 패턴이 있는 파일 이름 출력 / * : 모든 파일 출력
 -n : 매칭 되는 줄 번호 표시
 -v : 검색 패턴을 제외하고 검색
 -c : 검색 패턴과 매칭 되는 줄 개수 출력
 -w : 단어 단위로 검색

리눅스 팁
esc . = 마지막에 쓴 워드를 갖고온다.

RE (Regular Expression) : 정규화표현
쉘, 보안, 네트워크 정책을 정할 때 사용한다

Application 방화벽 정책을 만들 때 7계층 단어 허용, 금지를 정할 수 있다.
프로그래밍에도 쓰인다.

메타 문자
^ : 줄의 시작 지정 // 단순하면서 가장 많이 쓰인다
$ : 줄의 마지막 지정
. : 한 문자 대치 // 숫자나 문자 대치
* : 아무것도 없거나 여러 문자 대치
[] : 패턴 중 한 문자 대치 // 대소문자 [aA] 등
[^] : 패턴 중 제외 할 문자 // [^a-q]oot 등

egrep : egrep의 확장이다.

메타 문자
+ : 특정 문자 앞에 하나 이상의 문자 있음 / 붙이든 안붙이든 의미 x
x|y : x 또는 y
(abc|def) : abc 또는 def (문자열)

fgrep : 메타문자를 메타문자로 인식하지 않고 일반 문자로 처리 하는 명령어
\ : escape 탈출문자, 글자 그대로 문자 그대로 사용

find pathname expression action : 특정 디렉토리를 기준으로 하위 디렉토리를 검색해준다.
		 조건		경로 지정을 하지 않으면 현재 디렉토리가 기준이다.

-name file: 특정 파일 이름 지정(메타문자 사용 가능)
-type : 검색할 파일 종류 지정 | ex) f, d 등
-perm : 특정 권한을 가진 파일 검색
-user LoginID : 특정 사용자가 소유한 파일 검색
-size [+|-]n : 파일의 특정 크기 검색
-atime [+|-]n : 파일에 접근한 시간 검색	/  mtime[+|-]n : 파일 수정한 시간 검색
 보안 할 때 사건이 일어난 시점 +-로 체크한다. (쓸 일이 없을거다)

-exec command {} \; : 검색할 파일에 특정 명령 수행
-ok command {} \; : -exec 결과와 비슷하나, 특정 명령을 대화형으로 진행

vi (visual imporoved) : 텍스트 편집기
처음에 실행하면 command mode로 실행이 되고, 명령어를 입력하면 Edit mode가 된다. :을 누르면 last line mode로 가게 되며, 검색, 저장 등이 가능하다.

명령어 :
i(현재커서부터 입력) a(커서 앞부터 입력)	 o(다음 라인부터 입력)
I(줄의 처음)	   A(줄의 마지막)	 O(윗 줄 삽입)

dd : 잘라내기 / p : 붙여넣기 / cc : 잘라내기 / yy : 복사하기
P : 현재 라인 위에 붙여넣기 / / : 검색, 찾기 / n : 다음 단어 위로 / N : 다음 단어 아래로

경로 이름 메타문자
~	~user	~+	~-	-
ls 명령어에서 사용 / ~+ 현재 디렉토리 , ~- 이전 디렉토리 대시가 불가능

파일 이름 대체 메타문자
* : 대체	? : 글자를 대체	[] grap과 비슷하다.

인용부호 메타문자
' ' : 글자 그대로
" " : $,`,/ 세 개 메타문자를 제외한 나머지는 일반문자 취급
` ` : 명령어을 넣어 결과를 출력한다.

	출력	입력
uname	-a >a
ps -ef(현재 실행 중인 프로세스)

0 표준 입력(standard input) : 키보드
1 표준 출력(standard ouput) : 모니터
2 표준 에러(standrad error) : 모니터

방향재지정 메타문자
> 
>>
<
| : 처음 명령어를 실행하고 그 뒤 명령어를 실행하는 방향
