Image 생성

ADD
COPY
ENV
EXPOSE 노출할 포트
FROM 
LAEL
STOPSIGNAL
USER
VOULME 볼륨이 지정되는 어플리케이션이 있다.
WORKDIR

FROM
베이스 이미지, 기본 이미지
apache, php file 다 알 수없다. (패키지를 받아서 뜯어보면 알 수는 있다)
실행파일도 알 수 있지만 실행파일 하나로 작동하지 않는다. 라이브러리라던지 실행을 하기 위한 다른 파일이 필요하다.
그래서 베이스이미지(centos ubuntu)를 사용해서 그 위에 올리는 형태

FROM <Image>[:<tag>] 	|   [@<digest>] / hash

이미지를 생성할 때 순서대로 만들어서 계층을 쌓아야한다.

RUN
지시어 
A	-->	container	-->	image
					<--
B	-->	container	-->	image	
					<--
C	-->	container	-->	image

컨테이너 내에서 실행할 명령어, 이미지를 빌드할 때 실행할 명령어
etrypoint, cmd와 관련없다. << 이걸 지정할 command가 아니다.

1. RUN <command> = <yum -y install httpd>		<<<< shell from = (sh -c ls) 쉘을 띄워서 실행한다.
2. RUN ["ls", "-l", "/etc"], ["yum", "y", "install", "httd"]

ps -ef
TTY ?로 표기 되는건 커널이 실행 하는 것, 터미널이나 쉘을 사용안한다.

굳이 쉘을 띄울 필요는 없다. 1과 2의 동작방식은 다르다.

CMD
cmd만 쓰는 경우도 있고 entrypoint만 쓰는 경우가 있고 둘 다 쓰는 경우도 있다.
둘 다 사용하게 되면 entrypoint가 실행할 명령어, cmd는 아규먼트가 된다.

1. CMD ["EXECUTABLE", "param]

MAINTAINER [deprecated]
작성자

deprecated <<
소프트웨어는 상당히 빠르게 변한다. 없는 기능이 금방 생기기도 하고 있던 기능이 사라지기도 한다.
변하지 않는거에 집중을 하고 변하는걸 빨리 대응하면 된다.

EXPOSE
외부에 포트를 노출 시킨다.
사용을 안해도 포트는 노출이 된다. -p 옵션으로 포워딩 설정도 가능하다.
지시어이지 내부의 포트를 바꾼다거나 할 수 없다. (모르는 사람이 정보를 얻을 수 있는 지시어)

EXPOSE <port> [<port>/tcp,udp] | 여러 개를 사용하면 여러 개 지정 가능하다. (80-88 range)도 가능하다.

ENV
환경 변수, 쉘에서 사용할 환경 변수
mysql, mariadb 등 이미지내에서 정해진 환경변수가 있다.

ENV <key><value>

ADD
컨테이너 내에 file을 추가할 때 사용된다. 소유자, 그룹을 지정할 수 있다.

ADD [--chown=<user>:<group>] [<src>].. <dest> src 현재 경로, 절대 경로(권장) | dest 컨테이너내에 배치할 위치
공백이 있는 경우 ""를 사용해야한다.

COPY
ADD와 똑같다. 사용방법도 똑같다. ADD를 해도되고 COPY를 해도된다.
COPY [--chown=<user>:<group>] <src>... <dest> 

ENTRYPOINT
ENTRYPOINT ["executable", "param1", "param2"]  (exec form, preferred)
ENTRYPOINT command param1 param2 (shell form)

VOLUME
VOLUME ["/data"] 마운트할 위치를 정해주면 된다.

USER
생성할 사용자, CMD, ENTRYPOINT, RUN과 관련있다. << 를 실행할 사용자, 지정하지 않으면 ROOT이다.

WORKDIR
RUN, CMD, ENTRYPOINT와 상관관계를 갖고있다. 작업할 디렉토리
/a/b/c/test 를 실행한다고 가정하면 cmd만 이용해서 작업한다면 그대로 사용하면 된다.
없으면 모든 경로는 ROOT부터 시작된다.

.dockerignore file
도커 빌드할 때 무시할 file의 목록, 자기자신을 포함해서 image를 build할 때 add나 copy로 복사하지 않는다.

# comment
*/temp*
*/*/temp*
temp?

scratch (docker-hub)
파일을 정적으로 만들어야한다.

docker의 python은 필요한 라이브러리가 모두 다 포함되어있다. 그래서 용량이 크다.
alpine, base image (리눅스 배포판) busybox에서 나왔다. - 저용량 / 임베디드 기계에 쓰인다.

centos, ubuntu는 기본으로 배포하고 slim, alpine으로 사이즈를 작게해서 만든다.
사이즈를 작게하면 속도가 빠르다. 리소스도 절약된다.

콘텐츠 파일이 바뀌면 다시 빌드를 해야하나?
docker container cp index.php 80:/var/www/html

설정파일이 바뀌면 이미지를 다시 빌드하는게 낫다.
haproxy 설정파일을 포함해서 빌드해도 되고 간단하게 테스트할 때는 cp를 이용할 수 있다.

--entrypoint string
처음부터 있었던 옵션이 아님. entrypoint를 변경할 때 사용하는데 변경할 일은 거의없다.
처음에는 command밖에 교체가 되지 않았다.

docker container run --entrypoint bash -it myphp:v2 (image)
상황에 따라서 entrypoint를 변경할 수 있다.

docker ps = docker contaier ls,list와 같다.
docker images = docker image ls와 같다.

docker rm = docker container rm
docker rmi = docker image rm

편한걸로 사용하면 된다.

docker login
docker image tag [image]:[tag] [id/image]:[tag]
docker push id/image

compose reference
Docker compose : 도커의 추가 기능
compose는 만들다라는 의미를 갖고 있는데, 뭘 만드냐? -> 컨테이너를 만든다.
compose는 멀티 컨테이너를 구성할 수 있다.

복수의 컨테이너를 구성해서 하나의 서비스를 구성한다.
yaml을 사용해서 docker compose file을 만든다. container 환경변수, 볼륨 등등등
yaml로 구현할 수 있다. -> container 구축 실행 하는 걸 docker compose라고하고 compose file이라고한다.

docker version
클라이언트 명령어는 원격에 있어도 된다.

docker는 go로 만들어져있다.
컨테이너를 재시작하면 ip가 바뀔 수 있다. | ip를 가지고 통신하는건 좋은 방식이 아니다

도커 파일처럼 디렉토리를 만들고 yml file 생성, docker-compose up -d << 하면 실행이 되고 야물 파일을 읽어서 컨테이너를 만들어준다.

docker compose install

https://docs.docker.com/compose/install/

docker-compose ps
docker-compose [start, stop, restart, | up, rm]
docker-compose -d <<<<< * 해당 경로에서 *

wordpress container 1 db container 1
image, 

docker volume ls
docker network ls 

compose의 가장 큰 장점
docker-compose scale con=10 / 사이즈 조절, con은 container 이름. con을 늘리고 줄여서 늘릴 수 있다.

haproxy를 하나를 두고 loadbalcer가 분산을 하면된다. web이 외부로 포트를 분산하기 때문에 현재 상태에서는 포트 충돌 나기 때문에 error가 난다.



FROM centos:7
RUN yum -y install httpd php
ADD index.php /var/www/html/
CMD ["-D", "FOREGROUND"]
ENTRYPOINT ["/usr/sbin/httpd"]

deploy, placement, 

mysql
