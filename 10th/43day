설치과정
Engine
1. 운영체제 설치
2. 레포지토리 파일 등록
3. yum 업데이트, 패키지 설치 (ovirt-engine)
4. engine-setup 실행
5. dns 설정 (dns가 없다면 hosts)

Hosted (일반 centos 설치)
1. 운영체제 설치
2. 레퍼지토리 파일 등록 (vdsm)
3. 패키지설치
4. dns 설정 (dns가 없다면 hosts)

baremetal (ovirt homepage h.v 설치)
1. 하이퍼바이저 설치
2. dns 설정 (dns가 없다면 hosts)

가상화 정리
자원을 효율적으로 쓰기 위해서 사용을 한다.
하나의 시스템으로 여러 개의 시스템을 돌리기 위해서 사용
가상화 기술에서 가장 중요한게 독립성을 유지해줘야한다.

서버 가상화
실제 내가 관리할 때 하나의 엔진 머신에서 서비스를 설정해두고 웹 콘솔등을 이용해서 관리를한다.
매니저머신에 연결되어있는 물리적인 호스트 시스템들을 직접 서버에서 하나의 중앙집중화된 관리를 할 수 있다.
호스트 위에 vm 등 가상화 프로세스를 실행할 수 있다.

호스트 - 물리적인 실제 하드웨어 시스템 (메모리,디스크,cpu) 제공
게스트 - 가상머신
하이퍼바이저 - 호스트 시스템에서 게스트 가상머신을 관리를 하는게 하이퍼바이저이다.

전가상화, 반가상화
전가상화를 대중적으로 많이 사용한다. 성능은 반가상화가 좋지만 커널을 수정할 수 있는 리눅스, 유닉스는 사용이 가능하지만 윈도우는 사용이 불가능하고, 수정이 어렵기 때문에 전가상화를 선호한다. (지금은 전가상화, 반가상화의 성능차이도 많이 안난다)

일반 시스템
app -> os -> hw

가상 시스템
app -> os -> hv -> os -> hw
가로채는게 트랩, 바꾸는게 에뮬레이트

하이퍼바이저는 독립성 유지가 중요하다. (모니터링, 주변장치 기능도 있다)

하이퍼바이저 종류
native - baremetal, 운영체제 없이 처음부터 h.v를 직접 설치하는 방식 (최소한의 운영체제 역할만을 담당)
hosted - 반대되는 역할 평소에 쓰고 있는 시스템 처럼 os위에서 설치파일 이용해 h.v를 설치하는 방식

가상화, 클라우드
사용용도, 빈도로 구분해서 적합한 방법을 찾으면된다.

ovirt = 서버 가상화를 관리하는 도구.
kvm = 리눅스환경에서 가장 기본이 되는 가상화 방식. (도구)

thin = native
thick = hosted

ksm - 메모리 관리기법 / 정해진 메모리보다 더 많이 사용하기 위해서 쓰는 기법

host관리를 위해 vdsm가 필요하다.

ovirt 4.3 / centos 6,7

클러스트 : 그룹
마이그레이션 : 옮겨가는것 / 물리적인 장치가 고장나도 자동으로 옮겨지거나, 수동으로 옮기는것 (자동, 수동 다 된다)
 가상머신을 다른 장치로 옮겨가는것

engine-iso-uploader -i iso /root/a.iso

